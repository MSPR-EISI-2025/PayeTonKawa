name: Compose build & push (no Bake)

on:
  workflow_dispatch:
  push:
    branches: [develop, main]
  pull_request:
    branches: [develop, main]

env:
  DOCKERHUB_REPO: toto/payetonkawa  
  PROJECT_NAME: pk         

permissions:
  contents: read

concurrency:
  group: compose-build-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (root + private submodules)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          token: ${{ secrets.GH_SUBMODULES_TOKEN }}

      - name: Decide channel tag
        id: ch
        run: |
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            echo "channel=ci-main" >> $GITHUB_OUTPUT
          else
            echo "channel=ci-develop" >> $GITHUB_OUTPUT
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Detect buildable services
        id: svc
        run: |
          python3 - <<'PY' > buildable.txt
          import yaml, sys
          with open('docker-compose.yml') as f:
              data = yaml.safe_load(f) or {}
          svcs = [n for n,s in (data.get('services') or {}).items() if isinstance(s, dict) and 'build' in s]
          if not svcs: sys.exit("No buildable services found")
          print("\n".join(svcs))
          PY
          echo "services=$(paste -sd, buildable.txt)" >> $GITHUB_OUTPUT
          echo "Buildable services:"; cat buildable.txt

      - name: Generate compose override with image tags
        env:
          SHA: ${{ github.sha }}
        run: |
          echo "services:" > compose.publish.yml
          while read -r svc; do
            echo "  ${svc}:" >> compose.publish.yml
            echo "    image: toto/payetonkawa:${svc}-${SHA}" >> compose.publish.yml
          done < buildable.txt
          echo "----- compose.publish.yml -----"
          cat compose.publish.yml

      - name: Compose build (tagged)
        run: |
          docker compose -f docker-compose.yml -f compose.publish.yml build $(cat buildable.txt)

      - name: Compose push
        run: |
          docker compose -f docker-compose.yml -f compose.publish.yml push $(cat buildable.txt)

      - name: Retag & push channel tags
        env:
          SHA: ${{ github.sha }}
          CHANNEL: ${{ steps.ch.outputs.channel }}
        run: |
          set -euo pipefail
          while read -r svc; do
            SRC="toto/payetonkawa:${svc}-${SHA}"
            DST="toto/payetonkawa:${svc}-${CHANNEL}"
            docker tag  "$SRC" "$DST"
            docker push "$DST"
          done < buildable.txt
